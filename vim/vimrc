" ----------------------------------------------------------------------
" | General Settings                                                   |
" ----------------------------------------------------------------------

set nocompatible               " Don't make vim vi-compatibile

syntax on                      " Enable syntax highlighting

if has('autocmd')
    filetype plugin indent on
    "           │     │    └──── Enable file type detection
    "           │     └───────── Enable loading of indent file
    "           └─────────────── Enable loading of plugin files
endif

set autoindent                 " Copy indent to the new line

set backspace=indent           " ┐
set backspace+=eol             " │ Allow `backspace`
set backspace+=start           " ┘ in insert mode

set nobackup                   " no backup files
set nowritebackup              " only in case you don't want a backup file while editing
set noswapfile                 " no swap files

set cursorline                 " Highlight the current line
set encoding=utf-8 nobomb      " Use UTF-8 without BOM
set nowrap		               " Do not wrap lines

set tabstop=4                  " show existing tab with 4 spaces width
set shiftwidth=4               " when indenting with '>', use 4 spaces width
set expandtab                  " On pressing tab, insert 4 spaces

set hlsearch                   " Enable search highlighting
set ignorecase                 " Ignore case in search patterns
set incsearch                  " Highlight search pattern as
                               " it is being typed

set clipboard=unnamed          " ┐
                               " │ Use the system clipboard
if has('unnamedplus')          " │ as the default register
    set clipboard+=unnamedplus " │
endif                          " ┘

set mousehide                  " Hide mouse pointer while typing

set number                     " Show line number
set laststatus=2	           " Always show ruler

set visualbell                 " ┐
set noerrorbells               " │ Disable beeping and window flashing
set t_vb=                      " ┘ https://vim.wikia.com/wiki/Disable_beeping

set hidden 		               " Allow unsaved buffers in the background

set wildignore+=.DS_Store
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/bower_components/*,*/node_modules/*,*/.git/*
set wildignore+=*/smarty/*,*/vendor/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*,*/ckeditor/*,*/doc/*,*/source_maps/*,*/dist/*

" prevent syntax hl on huge files
autocmd BufWinEnter * if line2byte(line("$") + 1) > 100000 | syntax clear | endif

" ----------------------------------------------------------------------
" | Plugins                                                            |
" ----------------------------------------------------------------------

" Use Vundle to manage the vim plugins
" https://github.com/gmarik/Vundle.vim

" Disable file type detection
" (required by Vundle)
filetype off

" Set the runtime path to include Vundle
set runtimepath+=~/.vim/plugins/Vundle.vim

" Use ssh to get all bundles
let g:vundle_default_git_proto='git'

" Initialize Vundle and specify the path
" where the plugins should be installed
call vundle#begin('~/.vim/plugins')

    " Let Vundle manage Vundle (this is important!)
    Plugin 'gmarik/Vundle.vim'

    Plugin 'vim-airline/vim-airline'
    Plugin 'tomasr/molokai'
    Plugin 'ctrlpvim/ctrlp.vim'
    Plugin 'scrooloose/syntastic'
    " Plugin 'tpope/vim-surround'
    Plugin 'pangloss/vim-javascript'
    Plugin 'vim-pandoc/vim-pandoc'
    Plugin 'vim-pandoc/vim-pandoc-syntax' 

call vundle#end()

filetype on

" Plugin Configuration -------------------------------------------------------------

" Airline.vim {{{
augroup airline_config
  autocmd!
  let g:airline_powerline_fonts = 1

  if !exists('g:airline_symbols')
   let g:airline_symbols = {}
  endif
  
  " unicode symbols
  let g:airline_left_sep = '»'
  let g:airline_left_sep = '▶'
  let g:airline_right_sep = '«'
  let g:airline_right_sep = '◀'
  let g:airline_symbols.linenr = '␊'
  let g:airline_symbols.linenr = '␤'
  let g:airline_symbols.linenr = '¶'
  let g:airline_symbols.branch = '⎇'
  let g:airline_symbols.paste = 'ρ'
  let g:airline_symbols.paste = 'Þ'
  let g:airline_symbols.paste = '∥'
  let g:airline_symbols.whitespace = 'Ξ'
  

  let g:airline_enable_syntastic = 1
  let g:airline#extensions#tabline#buffer_nr_format = '%s '
  let g:airline#extensions#tabline#buffer_nr_show = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#fnamecollapse = 0
  let g:airline#extensions#tabline#fnamemod = ':t'
augroup END
" }}}

" ----------------------------------------------------------------------
" | Color Scheme                                                       |
" ----------------------------------------------------------------------

set t_Co=256                   " Enable full-color support

set background=dark            " Use colors that look good
                               " on a dark background

colorscheme molokai            " Use custom color scheme
let g:molokai_original = 1
let g:rehash256 = 1

" ----------------------------------------------------------------------
" | Syntax checker						       |
" ----------------------------------------------------------------------

" Syntastic.vim {{{
augroup syntastic_config
  autocmd!
  let g:syntastic_error_symbol = '✗'
  let g:syntastic_warning_symbol = '⚠'
  let g:syntastic_javascript_checkers = ['eslint']
augroup END
" }}}

" ----------------------------------------------------------------------
" | Key Mappings                                                       |
" ----------------------------------------------------------------------

let mapleader = ','			" Use a different mapleader (default is '\')
inoremap jj <ESC>			" Short cut for escape from insert mode
nnoremap <leader>w <C-w>v<C-w>l 	" Open vertical split and move to it
nnoremap <leader>s :w<CR>		" Quick save

nnoremap <leader>bn :bnext<CR> 		" Next buffer
nnoremap <leader>bp :bprevious<CR>	" Previous buffer
nnoremap <leader>bd :bdelete<CR>	" Delete buffer

" Clear highlighting on escape in normal mode
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" Paste toggle (,p) {{{
set pastetoggle=<leader>p
map <leader>p :set invpaste paste?<CR>
" }}}

" Insert newline {{{
map <leader><Enter> o<ESC>
" }}}

nmap <leader>ve :vsp $MYVIMRC<CR>	" [,v ] Make the opening of the `.vimrc` file easier
nnoremap <Leader>vr :source $MYVIMRC<CR> " Reload .vimrc

" pandoc {{{
augroup pandoc_config
  autocmd!
  " we need to use exe in order to use env. variables in the path (there's an
  " alternative using `let &g' but I can't get it to work
  exe 'let g:pandoc#biblio#bibs=["'.$HOME.'/projects/zettlr/zotero.json"]'
  let g:pandoc#modules#disabled = ["folding"]
  "let g:pandoc#completion#bib#mode = 'citeproc'
  let g:pandoc#biblio#bib_extensions = ["json", "bib", "bibtex", "ris", "mods", "enl", "wos", "medline", "copac"]
augroup END
" }}}
