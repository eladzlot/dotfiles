" ----------------------------------------------------------------------
" | General Settings                                                   |
" ----------------------------------------------------------------------

set nocompatible               " Don't make vim vi-compatibile

syntax on                      " Enable syntax highlighting

if has('autocmd')
    filetype plugin indent on
    "           │     │    └──── Enable file type detection
    "           │     └───────── Enable loading of indent file
    "           └─────────────── Enable loading of plugin files
endif

set autoindent                 " Copy indent to the new line

set backspace=indent           " ┐
set backspace+=eol             " │ Allow `backspace`
set backspace+=start           " ┘ in insert mode

set nobackup                   " no backup files
set nowritebackup              " only in case you don't want a backup file while editing
set noswapfile                 " no swap files

set cursorline                 " Highlight the current line
set encoding=utf-8 nobomb      " Use UTF-8 without BOM
set nowrap		               " Do not wrap lines

set tabstop=4                  " show existing tab with 4 spaces width
set shiftwidth=4               " when indenting with '>', use 4 spaces width
set expandtab                  " On pressing tab, insert 4 spaces

set hlsearch                   " Enable search highlighting
set ignorecase                 " Ignore case in search patterns
set incsearch                  " Highlight search pattern as
                               " it is being typed

set clipboard=unnamed          " ┐
                               " │ Use the system clipboard
if has('unnamedplus')          " │ as the default register
    set clipboard+=unnamedplus " │
endif                          " ┘

set mousehide                  " Hide mouse pointer while typing

set number                     " Show line number
set laststatus=2	           " Always show ruler

set visualbell                 " ┐
set noerrorbells               " │ Disable beeping and window flashing
set t_vb=                      " ┘ https://vim.wikia.com/wiki/Disable_beeping

set hidden 		               " Allow unsaved buffers in the background

set spelllang=en_us

set wildignore+=.DS_Store
set wildignore+=*.jpg,*.jpeg,*.gif,*.png,*.gif,*.psd,*.o,*.obj,*.min.js
set wildignore+=*/bower_components/*,*/node_modules/*,*/.git/*
set wildignore+=*/smarty/*,*/vendor/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/log/*,*/tmp/*,*/build/*,*/ckeditor/*,*/doc/*,*/source_maps/*,*/dist/*

" prevent syntax hl on huge files
autocmd BufWinEnter * if line2byte(line("$") + 1) > 100000 | syntax clear | endif

" ----------------------------------------------------------------------
" | Plugins                                                            |
" ----------------------------------------------------------------------

" Use vim-plug to manage the vim plugins
" https://github.com/junegunn/vim-plug

" Initialize Plug and specify the path
" where the plugins should be installed
call plug#begin('~/.vim/plugins')

    Plug 'vim-airline/vim-airline'
    Plug 'tomasr/molokai'
    Plug 'scrooloose/syntastic'
    Plug 'pangloss/vim-javascript'
    Plug 'vim-pandoc/vim-pandoc'
    Plug 'vim-pandoc/vim-pandoc-syntax' 
    Plug 'eigenfoo/stan-vim'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'

call plug#end()

" Plugin Configuration -------------------------------------------------------------

" Airline.vim {{{
augroup airline_config
  autocmd!
  let g:airline_powerline_fonts = 1

  if !exists('g:airline_symbols')
   let g:airline_symbols = {}
  endif
  
  " unicode symbols
  let g:airline_left_sep = '»'
  let g:airline_left_sep = '▶'
  let g:airline_right_sep = '«'
  let g:airline_right_sep = '◀'
  let g:airline_symbols.linenr = '␊'
  let g:airline_symbols.linenr = '␤'
  let g:airline_symbols.linenr = '¶'
  let g:airline_symbols.branch = '⎇'
  let g:airline_symbols.paste = 'ρ'
  let g:airline_symbols.paste = 'Þ'
  let g:airline_symbols.paste = '∥'
  let g:airline_symbols.whitespace = 'Ξ'
  

  let g:airline_enable_syntastic = 1
  let g:airline#extensions#tabline#buffer_nr_format = '%s '
  let g:airline#extensions#tabline#buffer_nr_show = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#fnamecollapse = 0
  let g:airline#extensions#tabline#fnamemod = ':t'
augroup END
" }}}

" ----------------------------------------------------------------------
" | Color Scheme                                                       |
" ----------------------------------------------------------------------

set t_Co=256                   " Enable full-color support

set background=dark            " Use colors that look good
                               " on a dark background

 colorscheme molokai            " Use custom color scheme
 let g:molokai_original = 0
 let g:rehash256 = 1

" ----------------------------------------------------------------------
" | Syntax checker						       |
" ----------------------------------------------------------------------

" Syntastic.vim {{{
augroup syntastic_config
  autocmd!
  let g:syntastic_error_symbol = '✗'
  let g:syntastic_warning_symbol = '⚠'
  let g:syntastic_javascript_checkers = ['eslint']
augroup END
" }}}

" ----------------------------------------------------------------------
" | Pandoc                                                             |
" ----------------------------------------------------------------------
augroup pandoc_config
  autocmd!
  " we need to use exe in order to use env. variables in the path (there's an
  " alternative using `let &g' but I can't get it to work
  exe 'let g:pandoc#biblio#bibs=["'.$HOME.'/projects/zettlr/zotero.json"]'
  " let g:pandoc#modules#disabled = ["folding"]
  "let g:pandoc#completion#bib#mode = 'citeproc'
  let g:pandoc#biblio#bib_extensions = ["json", "bib", "bibtex", "ris", "mods", "enl", "wos", "medline", "copac"]
augroup END

" ----------------------------------------------------------------------
" | Key Mappings                                                       |
" ----------------------------------------------------------------------

let mapleader = ','			" Use a different mapleader (default is '\')
inoremap jj <ESC>			" Short cut for escape from insert mode
nnoremap <leader>s :w<CR>		" Quick save

nnoremap <leader>bn :bnext<CR> 		" Next buffer
nnoremap <leader>bp :bprevious<CR>	" Previous buffer
nnoremap <leader>bd :bdelete<CR>	" Delete buffer

" Clear highlighting on escape in normal mode
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" Paste toggle (,p) {{{
    set pastetoggle=<leader>p
    map <leader>p :set invpaste paste?<CR>
" }}}

" edit vimrc {{{
    nmap <leader>ve :vsp $MYVIMRC<CR>	" [,v ] Make the opening of the `.vimrc` file easier
    nnoremap <Leader>vr :source $MYVIMRC<CR> " Reload .vimrc
" }}}

nnoremap <C-P> :Files<CR>
nnoremap <C-F> :Rg 

" Plain text to markdown
nnoremap <leader>x :s/\. /.\r/g<CR>

" ----------------------------------------------------------------------
" | Auto complete citations                                            |
" ----------------------------------------------------------------------
"  @TODO: move to vim/ftplugin

function! s:CiteSourceFZF(lines)
    let s:bib = pandoc#bibliographies#GetSuggestions('')
    let s:arr = map(copy(s:bib), "v:val['word'].' : '.v:val['menu']")
    return (s:arr)
endfunction

function! s:CiteReducerFZF(lines)
    let s:ids = map(a:lines, "'@'.(split(v:val, ' : ')[0])")    " for each line, pick id and prepend @
    return join(s:ids, '; ')                                    " join entries with ;
endfunction

autocmd FileType markdown,rmd inoremap <buffer> <expr> <c-x><c-o> fzf#vim#complete({
      \ 'source':  function('<sid>CiteSourceFZF'),
      \ 'reducer': function('<sid>CiteReducerFZF'),
      \ 'options': '--layout="reverse-list" --border --multi --margin 15%'})

" zettlr

function! s:New_zettl()
    let filename = strftime('%Y%m%d%H%M%S')
    echom filename
    execute 'edit '.filename.'.md'
    call append(0, '---')
    call append(1, 'id: '.filename)
    call append(2, 'title: ')
    call append(3, '---')
    execute "normal! 3GA "
endfunction

nnoremap <leader>zn :call <sid>New_zettl()<CR>
nnoremap <leader>zf :execute 'Rg '.expand('<cword>')<CR> 

" single line do and dp for diffget
nnoremap <silent> <leader>dp V:diffput<cr>
nnoremap <silent> <leader>dg V:diffget<cr>
